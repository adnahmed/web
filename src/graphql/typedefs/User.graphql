type User {
    id: UUID!
    username: String!
    prefix: String
    givenName: String!
    middleName: String
    lastName: String
    email: EmailAddress!
    role: Role!
    pictures: [UUID!]!
}

enum Role {
    administrator
    proctor
    examinee
}

type AuthenticationResponse {
    queryResponse: QueryResponse
    token: String
    user: User
}

type Query {
    logInEmail(email: EmailAddress!,
        password: String!
    ): AuthenticationResponse!
    logInUsername(username: String!,
        password: String!
    ): AuthenticationResponse!
}

input UserRegisterationInput {
    username: String!, 
    password: String!, 
    role: Role!, 
    prefix: String, 
    givenName:String!, 
    middleName:String, 
    lastName:String, 
    email: EmailAddress!,
    organization: String!
}

type Mutation {
    register(user: UserRegisterationInput!): AuthenticationResponse!
    unregister(id: UUID!): QueryResponse!
}
