type Administrator {
    id: UUID!
    first_name: String!
    last_name: String!
    name: String!
}

type Proctor {
    id: ID!
    first_name: String!
    last_name: String!
    name: String!
    groups: [Group]
    conductedExams: [Exam!]
    conductedPapers: [Paper!]
}
type Examinee {
    id: UUID!
    first_name: String!
    last_name: String!
    name: String!
    groups: [Group]
    completedExams: [Exam!]
    completedPaper: [Paper!]
}

type Group {
    name: String! 
}
type Paper {
    id: UUID!
    subjects: [Subject] 
    startTime: DateTime!
    endTime: DateTime!
    multipleChoicePapers: [MultipleChoicePaper!]!
    pdPaper: [PdfPaper!]!
}

type Subject {
    id: UUID!
    name: String! 
}

type PdfPaper {
    id: UUID!
    path: String! 
    timeLimit: Duration!
}

type MultipleChoicePaper {
    id: UUID!
    mcqs: [MutipleChoiceQuestion!]!
    timeLimit: Duration!
}
type Option {
    statement: String!  
}
type MutipleChoiceQuestion {
    id: UUID!
    statement: String!  
    options: [Option!]!
}

type Book {
    title: String
    author: String
}

# Read

type Query {
    examinees: [Examinee]
    proctors: [Proctor]
    exams: [Exam]
    papers: [Paper]
    mcqPapers: [multipleChoicePapers]
    mcqQuestions: [MutipleChoiceQuestion]
    pdfPapers: [PdfPaper]
    groups: [Group]
    subjects: [Subject]
    books: [Book]
}
# Write
"""
interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type AddExamMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  exam: Exam
}
type Mutation {
    addExam(): AddExamMutationResponse
}
"""